<% attribute = named_args.blank? ? (class_name.constantize.column_names - ['id', 'created_at', 'updated_at']).first : named_args.first.name -%>
# Make sure you have defined path in the support/path.rb for
#    when /the edit <%= singular_name %> page for existing <%= singular_name %>/
#      edit_<%= singular_name %>_path(:id => <%= class_name %>.first.id)
#

When /^I submit valid <%= singular_name %> information$/ do
  @new_<%= singular_name %> = Factory.build(:<%= singular_name %>)

  fill_in '<%= singular_name %>_<%= attribute %>', :with => @new_<%= singular_name %>.<%= attribute %>
  click_button '<%= singular_name %>_submit'
end

When /^I submit invalid <%= singular_name %> information$/ do
  @new_<%= singular_name %> = Factory.build(:<%= singular_name %>)

  fill_in '<%= singular_name %>_<%= attribute %>', :with => ''
  click_button '<%= singular_name %>_submit'
end

Then /^I should see all existing <%= plural_name %>$/ do
  <%= class_name %>.all.each do |<%= singular_name %>|
    Then %Q{I should see "#{<%= singular_name %>.<%= attribute %>}"}
  end
end

Then /^new <%= singular_name %> should exists$/ do
  <%= class_name %>.exists?(:<%= attribute %> => @new_<%= singular_name %>.<%= attribute %>).should_not be_blank
end

Then /^new <%= singular_name %> should not exists$/ do
  <%= class_name %>.exists?(:<%= attribute %> => @new_<%= singular_name %>.<%= attribute %>).should be_blank
end

Then /^exsisting <%= singular_name %> should be updated$/ do
  <%= singular_name %> = <%= class_name %>.first
  <%= singular_name %>.<%= attribute %>.should eql(@new_<%= singular_name %>.<%= attribute %>)
end

Then /^exsisting <%= singular_name %> should not be updated$/ do
  <%= singular_name %> = <%= class_name %>.first
  <%= singular_name %>.<%= attribute %>.should_not eql(@new_<%= singular_name %>.<%= attribute %>)
end
